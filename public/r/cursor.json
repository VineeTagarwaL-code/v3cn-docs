{
    "$schema": "https://ui.shadcn.com/schema/registry-item.json",
    "name": "cursor",
    "type": "registry:component",
    "description": "A custom cursor component with interactive hover effects and animations.",
    "dependencies": [
      "framer-motion"
    ],
    "files": [
      {
        "path": "components/cursor.tsx",
        "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport { useState, useEffect, useRef } from \"react\";\nimport { motion } from \"framer-motion\";\n\ntype cursorProp = {\n  cursorClass?: string;\n};\n\nexport const Cursor = ({ cursorClass }: cursorProp) => {\n  const [position, setPosition] = useState({ x: 0, y: 0 });\n  const [isVisible, setIsVisible] = useState(false);\n  const [isInteracting, setIsInteracting] = useState(false);\n  const [isClicked, setIsClicked] = useState(false);\n\n  const cursorRef = useRef<HTMLDivElement>(null);\n\n  // Update cursor position\n  const updateCursorPosition = (e: MouseEvent) => {\n    if (!cursorRef.current) return;\n    \n    const x = e.clientX;\n    const y = e.clientY;\n    \n    setPosition({ x, y });\n  };\n\n  useEffect(() => {\n    const handleMouseMove = (e: MouseEvent) => {\n      if (!isVisible) setIsVisible(true);\n      \n      const interactable = (e.target as HTMLElement).closest(\".interactable\");\n      const interacting = interactable !== null;\n      \n      updateCursorPosition(e);\n      \n      setIsInteracting(interacting);\n    };\n\n    const handleMouseLeave = () => {\n      setIsVisible(false);\n    };\n\n    const handleMouseEnter = () => {\n      setIsVisible(true);\n    };\n\n    window.addEventListener(\"mousemove\", handleMouseMove);\n    document.body.addEventListener(\"mouseleave\", handleMouseLeave);\n    document.body.addEventListener(\"mouseenter\", handleMouseEnter);\n\n    return () => {\n      window.removeEventListener(\"mousemove\", handleMouseMove);\n      document.body.removeEventListener(\"mouseleave\", handleMouseLeave);\n      document.body.removeEventListener(\"mouseenter\", handleMouseEnter);\n    };\n  }, [isVisible]);\n\n  useEffect(() => {\n    const handleClick = () => {\n      setIsClicked(true);\n      setTimeout(() => {\n        setIsClicked(false);\n      }, 100);\n    };\n\n    window.addEventListener(\"click\", handleClick);\n\n    return () => {\n      window.removeEventListener(\"click\", handleClick);\n    };\n  }, []);\n\n  return (\n    <>\n      <motion.div\n        whileTap={{ scale: 0.9 }}\n        id=\"trailer\"\n        style={{\n          transform: `translate(${position.x - (cursorRef.current?.offsetWidth || 20) / 2}px, ${position.y - (cursorRef.current?.offsetHeight || 20) / 2}px) scale(${isInteracting ? 3 : 1})`,\n          opacity: isVisible ? 1 : 0,\n        }}\n        className={cn(\n          \"bg-transparent rounded-full fixed z-50 pointer-events-none border-[3px] border-slate-500 border-solid w-10 h-10 transition-transform duration-100\",\n          isClicked && \"w-8 h-8\",\n          cursorClass\n        )}\n        ref={cursorRef}\n      ></motion.div>\n    </>\n  );\n};",
        "type": "registry:component",
        "target": "components/cursor.tsx"
      }
    ]
}