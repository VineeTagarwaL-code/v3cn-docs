{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "cursor",
  "type": "registry:component",
  "title": "Cursor",
  "description": "A component for displaying Cursor.",
  "files": [
    {
      "path": "registry/v3cn/cursor/cursor.tsx",
      "content": "\"use client\";\r\n\r\nimport { useEffect, useRef, useState } from \"react\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\nimport { motion } from \"framer-motion\";\r\n\r\ntype CursorProps = {\r\n  cursorClass?: string;\r\n};\r\n\r\ntype Position = {\r\n  x: number;\r\n  y: number;\r\n};\r\n\r\ntype TrailerType = \"default\" | \"video\";\r\n\r\nexport const Cursor = ({ cursorClass }: CursorProps) => {\r\n  const [trailerType, setTrailerType] = useState<TrailerType>(\"default\");\r\n  const [isInteracting, setIsInteracting] = useState(false);\r\n  const [isClicked, setIsClicked] = useState(false);\r\n\r\n  const position:Position = {\r\n    x: 0,\r\n    y: 0,\r\n  };\r\n  const cursorRef = useRef<HTMLDivElement>(null);\r\n\r\n  const animateTrailer = (e: MouseEvent) => {\r\n    if (!cursorRef.current) return;\r\n\r\n    const x = e.clientX - cursorRef.current.offsetWidth / 2;\r\n    const y = e.clientY - cursorRef.current.offsetHeight / 2;\r\n\r\n    const keyframes = {\r\n      transform: `translate(${x}px, ${y}px) scale(${isInteracting ? 3 : 1})`,\r\n    };\r\n\r\n    cursorRef.current.animate(keyframes, {\r\n      duration: 100,\r\n      fill: \"forwards\",\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const handleMouseMove = (e: MouseEvent) => {\r\n      const interactable = (e.target as HTMLElement).closest(\".interactable\");\r\n      const interacting = interactable !== null;\r\n\r\n      animateTrailer(e);\r\n\r\n      setTrailerType(interacting ? (interactable as HTMLElement).dataset.type as TrailerType : \"default\");\r\n      setIsInteracting(interacting);\r\n    };\r\n\r\n    window.addEventListener(\"mousemove\", handleMouseMove);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"mousemove\", handleMouseMove);\r\n    };\r\n  }, [isInteracting]);\r\n\r\n  useEffect(() => {\r\n    const handleClick = () => {\r\n      setIsClicked(true);\r\n      setTimeout(() => {\r\n        setIsClicked(false);\r\n      }, 100);\r\n    };\r\n\r\n    window.addEventListener(\"click\", handleClick);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"click\", handleClick);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <motion.div\r\n      whileTap={{ scale: 0.9 }}\r\n      id=\"trailer\"\r\n      style={{ top: `${position.y}px`, left: `${position.x}px` }}\r\n      className={cn(\r\n        \"bg-transparent rounded-full fixed z-50 pointer-events-none border-[3px] border-slate-500 border-solid w-10 h-10 transition-all\",\r\n        cursorClass,\r\n        isClicked && \"w-8 h-8\"\r\n      )}\r\n      data-type={trailerType}\r\n      ref={cursorRef}\r\n    />\r\n  );\r\n};\r\n",
      "type": "registry:component",
      "target": "components/cursor.tsx"
    }
  ]
}