{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "github",
  "type": "registry:component",
  "title": "GitHub Graph",
  "description": "A GitHub component for displaying contribution graph with custom styling.",
  "files": [
    {
      "path": "registry/v3cn/github/github.tsx",
      "content": "\"use client\";\r\n\r\nimport { Activity, ActivityCalendar } from \"react-activity-calendar\";\r\nimport { memo, useCallback, useEffect, useState } from \"react\";\r\n\r\nimport { useTheme } from \"next-themes\";\r\n\r\n/**\r\n * Props for the GitHub contribution graph component\r\n */\r\ntype GithubGraphProps = {\r\n  /** GitHub username to fetch contributions for */\r\n  username: string;\r\n  /** Margin between contribution blocks in pixels */\r\n  blockMargin?: number;\r\n  /** Custom color palette for light theme */\r\n  lightColorPalette?: string[];\r\n  /** Custom color palette for dark theme */\r\n  darkColorPalette?: string[];\r\n};\r\n\r\n/**\r\n * API response type for GitHub contributions\r\n */\r\ntype GithubApiResponse = {\r\n  data: Activity[];\r\n  error?: string;\r\n};\r\n\r\nconst DEFAULT_LIGHT_PALETTE = [\r\n  \"#ebedf0\",\r\n  \"#9be9a8\",\r\n  \"#40c463\",\r\n  \"#30a14e\",\r\n  \"#216e39\",\r\n];\r\n\r\nconst DEFAULT_DARK_PALETTE = [\r\n  \"#1e1e2f\",\r\n  \"#5a3e7a\",\r\n  \"#7e5aa2\",\r\n  \"#a87cc3\",\r\n  \"#d9a9e6\",\r\n];\r\n\r\n/**\r\n * GitHub contribution graph component that displays user's contribution activity\r\n */\r\nexport const GithubGraph = memo(({\r\n  username,\r\n  blockMargin,\r\n  lightColorPalette = DEFAULT_LIGHT_PALETTE,\r\n  darkColorPalette = DEFAULT_DARK_PALETTE,\r\n}: GithubGraphProps) => {\r\n  const [contribution, setContribution] = useState<Activity[]>([]);\r\n  const [loading, setIsLoading] = useState<boolean>(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const { theme } = useTheme();\r\n\r\n  const fetchData = useCallback(async () => {\r\n    try {\r\n      setError(null);\r\n      setIsLoading(true);\r\n      const contributions = await fetchContributionData(username);\r\n      setContribution(contributions);\r\n    } catch (error) {\r\n      setError(error instanceof Error ? error.message : \"Failed to fetch contribution data\");\r\n      setContribution([]);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [username]);\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, [fetchData]);\r\n\r\n  const label = {\r\n    totalCount: `{{count}} contributions in the last year`,\r\n  };\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"text-red-500 p-4 text-center\">\r\n        Error: {error}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"relative\">\r\n      {loading && (\r\n        <div className=\"absolute inset-0 flex items-center justify-center\">\r\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900 dark:border-white\"></div>\r\n        </div>\r\n      )}\r\n      <ActivityCalendar\r\n        data={contribution}\r\n        maxLevel={4}\r\n        blockMargin={blockMargin ?? 2}\r\n        loading={loading}\r\n        labels={label}\r\n        theme={{\r\n          light: lightColorPalette,\r\n          dark: darkColorPalette,\r\n        }}\r\n        colorScheme={theme === \"dark\" ? \"dark\" : \"light\"}\r\n      />\r\n    </div>\r\n  );\r\n});\r\n\r\nGithubGraph.displayName = \"GithubGraph\";\r\n\r\n/**\r\n * Fetches GitHub contribution data for a given username\r\n */\r\nasync function fetchContributionData(username: string): Promise<Activity[]> {\r\n  try {\r\n    const response = await fetch(`https://github.vineet.pro/api/${username}`);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n\r\n    let responseBody: GithubApiResponse;\r\n    try {\r\n      responseBody = await response.json();\r\n    } catch (parseError) {\r\n      throw new Error(\"Failed to parse response data\", { cause: parseError as Error });\r\n    }\r\n\r\n    if (!responseBody.data) {\r\n      throw new Error(\"No contribution data received\");\r\n    }\r\n\r\n    return responseBody.data;\r\n  } catch (error) {\r\n    if (error instanceof Error) {\r\n      console.error(\"Error fetching GitHub contributions:\", error.message);\r\n      return [];\r\n    }\r\n    console.error(\"An unexpected error occurred while fetching GitHub contributions\");\r\n    return [];\r\n  }\r\n}",
      "type": "registry:component",
      "target": "components/github.tsx"
    }
  ]
}