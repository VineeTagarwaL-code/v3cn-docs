{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "card",
  "type": "registry:block",
  "title": "Card",
  "description": "A component for displaying Card.",
  "files": [
    {
      "path": "registry/v3cn/card/card.tsx",
      "content": "\"use client\";\r\n\r\nimport React, {\r\n  createContext,\r\n  useContext,\r\n  useEffect,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nconst MouseEnterContext = createContext<\r\n  [boolean, React.Dispatch<React.SetStateAction<boolean>>] | undefined\r\n>(undefined);\r\n\r\nexport const CardContainer = ({\r\n  children,\r\n  className,\r\n  containerClassName,\r\n}: {\r\n  children?: React.ReactNode;\r\n  className?: string;\r\n  containerClassName?: string;\r\n}) => {\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n  const [isMouseEntered, setIsMouseEntered] = useState(false);\r\n\r\n  const handleMouseMove = (e: React.MouseEvent<HTMLDivElement>) => {\r\n    if (!containerRef.current) return;\r\n    const { left, top, width, height } =\r\n      containerRef.current.getBoundingClientRect();\r\n    const x = (e.clientX - left - width / 2) / 25;\r\n    const y = (e.clientY - top - height / 2) / 25;\r\n    containerRef.current.style.transform = `rotateY(${x}deg) rotateX(${y}deg)`;\r\n  };\r\n\r\n  const handleMouseEnter = () => {\r\n    setIsMouseEntered(true);\r\n    if (!containerRef.current) return;\r\n  };\r\n\r\n  const handleMouseLeave = () => {\r\n    if (!containerRef.current) return;\r\n    setIsMouseEntered(false);\r\n    containerRef.current.style.transform = \"rotateY(0deg) rotateX(0deg)\";\r\n  };\r\n  return (\r\n    <MouseEnterContext.Provider value={[isMouseEntered, setIsMouseEntered]}>\r\n      <div\r\n        className={cn(\"flex items-center justify-center\", containerClassName)}\r\n        style={{\r\n          perspective: \"1000px\",\r\n        }}\r\n      >\r\n        <div\r\n          ref={containerRef}\r\n          onMouseEnter={handleMouseEnter}\r\n          onMouseMove={handleMouseMove}\r\n          onMouseLeave={handleMouseLeave}\r\n          className={cn(\r\n            \"flex items-center justify-center relative transition-all duration-200 ease-linear\",\r\n            className\r\n          )}\r\n          style={{\r\n            transformStyle: \"preserve-3d\",\r\n          }}\r\n        >\r\n          {children}\r\n        </div>\r\n      </div>\r\n    </MouseEnterContext.Provider>\r\n  );\r\n};\r\n\r\nexport const CardItem = ({\r\n  children,\r\n  className,\r\n  translateX = 0,\r\n  translateY = 0,\r\n  translateZ = 0,\r\n  rotateX = 0,\r\n  rotateY = 0,\r\n  rotateZ = 0,\r\n  ...rest\r\n}: {\r\n  as?: React.ElementType;\r\n  children: React.ReactNode;\r\n  className?: string;\r\n  translateX?: number | string;\r\n  translateY?: number | string;\r\n  translateZ?: number | string;\r\n  rotateX?: number | string;\r\n  rotateY?: number | string;\r\n  rotateZ?: number | string;\r\n}) => {\r\n  const ref = useRef<HTMLDivElement>(null);\r\n  const [isMouseEntered] = useMouseEnter();\r\n\r\n  useEffect(() => {\r\n    handleAnimations();\r\n  }, [isMouseEntered]);\r\n\r\n  const handleAnimations = () => {\r\n    if (!ref.current) return;\r\n    if (isMouseEntered) {\r\n      ref.current.style.transform = `translateX(${translateX}px) translateY(${translateY}px) translateZ(${translateZ}px) rotateX(${rotateX}deg) rotateY(${rotateY}deg) rotateZ(${rotateZ}deg)`;\r\n    } else {\r\n      ref.current.style.transform =\r\n        \"translateX(0px) translateY(0px) translateZ(0px) rotateX(0deg) rotateY(0deg) rotateZ(0deg)\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      ref={ref}\r\n      className={cn(\"w-fit transition duration-200 ease-linear\", className)}\r\n      {...rest}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\n// Create a hook to use the context\r\nexport const useMouseEnter = () => {\r\n  const context = useContext(MouseEnterContext);\r\n  if (context === undefined) {\r\n    throw new Error(\"useMouseEnter must be used within a MouseEnterProvider\");\r\n  }\r\n  return context;\r\n};",
      "type": "registry:component",
      "target": "components/v3cn/card.tsx"
    }
  ]
}