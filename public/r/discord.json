{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "discord",
  "type": "registry:component",
  "title": "Discord Presence",
  "description": "A component for displaying Discord presence.",
  "files": [
    {
      "path": "registry/v3cn/discord/discord.tsx",
      "content": "\"use client\";\r\n\r\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nimport Image from \"next/image\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\ntype TDiscord = {\r\n  userId: string;\r\n  userName: string;\r\n  activityDetailClass?: string;\r\n  activityDescriptionClass?: string;\r\n  activityImageClassName?: string;\r\n  progressBarClassName?: string;\r\n  localTimeClass?: string;\r\n};\r\n\r\ntype TActivityImage = {\r\n  largeActivityImage: string;\r\n  smallActivityImage: string;\r\n  isActivity: boolean;\r\n  isSpotifyPlaying: boolean;\r\n};\r\n\r\n/**\r\n * visual studio code activity\r\n */\r\ntype TActivity = {\r\n  application_id: string;\r\n  assets: {\r\n    large_image: string;\r\n    large_text: string;\r\n    small_image: string;\r\n    small_text: string;\r\n  };\r\n  details: string;\r\n  id: string;\r\n  name: string;\r\n  state: string;\r\n};\r\n\r\ntype TDiscordUser = {\r\n  details: string;\r\n  discord_status: string;\r\n  username: string;\r\n  avatar: string;\r\n  id: string;\r\n};\r\n\r\ntype TSpotifyData = {\r\n  album: string;\r\n  album_art_url: string;\r\n  artist: string;\r\n  song: string;\r\n  timestamps: {\r\n    start: number;\r\n    end: number;\r\n  };\r\n  track_id: string;\r\n};\r\n\r\ntype TActivityDetail = {\r\n  detail: string;\r\n  description: string;\r\n};\r\n\r\nexport const Discord: React.FC<TDiscord> = ({\r\n  userId,\r\n  userName,\r\n  activityDescriptionClass,\r\n  activityImageClassName,\r\n  activityDetailClass,\r\n  progressBarClassName,\r\n  localTimeClass,\r\n}: TDiscord) => {\r\n  const [isLoading, setIsLoading] = useState<boolean>(true);\r\n  const [activityImage, setActivityImage] = useState<TActivityImage>({\r\n    largeActivityImage: \"\",\r\n    smallActivityImage: \"\",\r\n    isActivity: true,\r\n    isSpotifyPlaying: false,\r\n  });\r\n  const [activityDetais, setActivityDetails] = useState<TActivityDetail>({\r\n    detail: \"\",\r\n    description: \"\",\r\n  });\r\n\r\n  const [progress, setProgress] = useState<number>(0);\r\n  function musicProgress(spotify: Pick<TSpotifyData, \"timestamps\">) {\r\n    const totalTime = spotify.timestamps.end - spotify.timestamps.start;\r\n    const progress =\r\n      100 - (100 * (spotify.timestamps.end - new Date().getTime())) / totalTime;\r\n    setProgress(progress);\r\n  }\r\n   useDiscord({\r\n    userId,\r\n    setIsLoading,\r\n    setActivityImage,\r\n    musicProgress,\r\n    setActivityDetails,\r\n  });\r\n\r\n  return (\r\n    <div className=\"my-6\">\r\n      {isLoading ? (\r\n        <DiscordSkeleton />\r\n      ) : (\r\n        <div className=\"flex gap-2\">\r\n          <ImageCont\r\n            activityImage={activityImage}\r\n            activityImageClassName={activityImageClassName}\r\n          />\r\n          <div className=\"flex flex-col justify-center items-start gap-2\">\r\n            <AcitvityInfo\r\n              activityDetais={activityDetais}\r\n              activityDescriptionClass={activityDescriptionClass}\r\n              activityDetailClass={activityDetailClass}\r\n            />\r\n            {activityImage.isSpotifyPlaying ? (\r\n              <Progress\r\n                value={progress}\r\n                className=\" w-[100px] md:w-[200px] h-[3px] text-red-500 \"\r\n                progressBarClassName={progressBarClassName}\r\n              />\r\n            ) : null}\r\n            <div className=\"flex flex-row flex-nowrap gap-2\">\r\n              <span className=\"capitalize\">{userName}</span> â€¢{\" \"}\r\n              <LocalTime localTimeClass={localTimeClass} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst AcitvityInfo = ({\r\n  activityDetais,\r\n  activityDetailClass,\r\n  activityDescriptionClass,\r\n}: {\r\n  activityDetais: TActivityDetail;\r\n  activityDetailClass?: string;\r\n  activityDescriptionClass?: string;\r\n}) => {\r\n  return (\r\n    <div className=\"flex flex-col gap-1\">\r\n      <span className={cn(\"text-base font-semibold mb-1\", activityDetailClass)}>\r\n        {activityDetais.detail}\r\n      </span>\r\n      <span className={cn(\"text-sm\", activityDescriptionClass)}>\r\n        {activityDetais.description}\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\ntype TUseDiscord = {\r\n  userId: string;\r\n  setIsLoading: React.Dispatch<React.SetStateAction<boolean>>;\r\n  setActivityImage: React.Dispatch<React.SetStateAction<TActivityImage>>;\r\n  musicProgress: (spotify: Pick<TSpotifyData, \"timestamps\">) => void;\r\n  setActivityDetails: React.Dispatch<React.SetStateAction<TActivityDetail>>;\r\n};\r\n\r\nconst useDiscord = ({\r\n  userId,\r\n  setIsLoading,\r\n  setActivityImage,\r\n  musicProgress,\r\n  setActivityDetails,\r\n}: TUseDiscord) => {\r\n  useEffect(() => {\r\n    let lanyard: WebSocket | null = null;\r\n    const connect = () => {\r\n      lanyard = new WebSocket(`wss://api.lanyard.rest/socket`);\r\n      if (!lanyard) {\r\n        return;\r\n      }\r\n      lanyard.onmessage = (event) => {\r\n        const json = JSON.parse(event.data);\r\n        const opCode = json.op;\r\n        const data: {\r\n          discord_user: TDiscordUser;\r\n          discord_status: string;\r\n          heartbeat_interval: number;\r\n          activities: TActivity[];\r\n          listening_to_spotify: boolean;\r\n          spotify: TSpotifyData;\r\n        } = json.d;\r\n\r\n        if (opCode === 1) {\r\n          let heartbeatInterval: NodeJS.Timer | number =\r\n            data.heartbeat_interval;\r\n          lanyard?.send(\r\n            JSON.stringify({\r\n              op: 2,\r\n              d: { subscribe_to_id: userId },\r\n            })\r\n          );\r\n\r\n          if (heartbeatInterval) {\r\n            heartbeatInterval = setInterval(() => {\r\n              lanyard?.send(\r\n                JSON.stringify({\r\n                  op: 3,\r\n                })\r\n              );\r\n            }, heartbeatInterval);\r\n          }\r\n        } else if (opCode === 0) {\r\n          if (data.listening_to_spotify) {\r\n            const spotifyData = data.spotify;\r\n            setActivityImage({\r\n              largeActivityImage: spotifyData.album_art_url,\r\n              smallActivityImage: spotifyData.album_art_url,\r\n              isActivity: true,\r\n              isSpotifyPlaying: true,\r\n            });\r\n            musicProgress(spotifyData);\r\n            setActivityDetails({\r\n              detail: spotifyData.artist,\r\n              description: spotifyData.song,\r\n            });\r\n            setIsLoading(false);\r\n          } else if (data.activities && data.activities[0]) {\r\n            const activity = data.activities[0];\r\n            const largeImage = activity.assets?.large_image.includes(\"http\")\r\n              ? \"https://\" +\r\n                activity.assets.large_image.replace(\r\n                  /^mp:external\\/[^\\/]+\\/https\\//,\r\n                  \"\"\r\n                )\r\n              : `https://cdn.discordapp.com/app-assets/${activity.application_id}/${activity.assets.large_image}.webp?size=512`;\r\n            const smallImage = activity.assets?.small_image.includes(\"http\")\r\n              ? \"https://\" +\r\n                activity.assets.small_image.replace(\r\n                  /^mp:external\\/[^\\/]+\\/https\\//,\r\n                  \"\"\r\n                )\r\n              : `https://cdn.discordapp.com/app-assets/${activity.application_id}/${activity.assets.small_image}.webp?size=512`;\r\n            setActivityImage({\r\n              largeActivityImage: largeImage,\r\n              smallActivityImage: smallImage,\r\n              isActivity: true,\r\n              isSpotifyPlaying: false,\r\n            });\r\n            setActivityDetails({\r\n              detail: activity.details,\r\n              description: activity.state,\r\n            });\r\n            setIsLoading(false);\r\n          } else {\r\n            const user = data;\r\n            const largeImage = `https://cdn.discordapp.com/avatars/${user.discord_user.id}/${user.discord_user?.avatar}.png?size=512`;\r\n\r\n            setActivityImage({\r\n              largeActivityImage: largeImage,\r\n              smallActivityImage: largeImage,\r\n              isActivity: false,\r\n              isSpotifyPlaying: false,\r\n            });\r\n            let status =\r\n              user.discord_status.charAt(0).toUpperCase() +\r\n              user.discord_status.slice(1);\r\n            status = status === \"Dnd\" ? \"Do Not Disturb\" : status;\r\n\r\n            setActivityDetails({\r\n              detail: user.discord_user.username,\r\n              description: status,\r\n            });\r\n\r\n            setIsLoading(false);\r\n          }\r\n        }\r\n      };\r\n    };\r\n    connect();\r\n  });\r\n};\r\n\r\ntype TImageCont = {\r\n  activityImageClassName?: string;\r\n  activityImage: TActivityImage;\r\n};\r\n\r\nconst ImageCont: React.FC<TImageCont> = ({\r\n  activityImageClassName,\r\n  activityImage,\r\n}: TImageCont) => {\r\n  return (\r\n    <div\r\n      className={cn(\r\n        \"relative mt-1  max-w-[100px] h-[100px] \",\r\n        activityImageClassName\r\n      )}\r\n    >\r\n      {activityImage.largeActivityImage == \"\" ? (\r\n        <div className=\"animate-pulse bg-gray-500 rounded-2xl\"></div>\r\n      ) : (\r\n        <Image\r\n          src={activityImage.largeActivityImage}\r\n          className={cn(\r\n            \"rounded-2xl relative select-none\",\r\n            `${\r\n              activityImage.isSpotifyPlaying &&\r\n              \"animate-[spin_40s_linear_infinite] rounded-full\"\r\n            }`\r\n          )}\r\n          width={100}\r\n          height={100}\r\n          alt=\"Activity Image\"\r\n        />\r\n      )}\r\n\r\n      {!activityImage.isSpotifyPlaying && activityImage.isActivity && (\r\n        <Image\r\n          src={activityImage.smallActivityImage}\r\n          height={40}\r\n          width={40}\r\n          className={cn(\r\n            \"rounded-full bottom-[-10px] right-0 select-none absolute p-2 bg-black/90\",\r\n            {}\r\n          )}\r\n          alt=\"Activity Image\"\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\ntype TLocalTime = {\r\n  localTimeClass?: string;\r\n};\r\n\r\nconst LocalTime: React.FC<TLocalTime> = ({ localTimeClass }: TLocalTime) => {\r\n  const [localTime, setLocalTime] = useState<string>(\r\n    new Date().toLocaleTimeString()\r\n  );\r\n\r\n  const setLocalTimeState = () => {\r\n    setLocalTime(new Date().toLocaleTimeString());\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (typeof window === \"undefined\") return;\r\n\r\n    const intervalId = window.setInterval(setLocalTimeState, 1000); // Update local time every second\r\n\r\n    return () => clearInterval(intervalId);\r\n  }, []);\r\n\r\n  return <span className={localTimeClass}>{localTime}</span>;\r\n};\r\n\r\ntype progressProps = {\r\n  progressBarClassName?: string;\r\n  value?: number;\r\n};\r\n\r\nconst Progress = React.forwardRef<\r\n  React.ElementRef<typeof ProgressPrimitive.Root>,\r\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root> & progressProps\r\n>(({ className, progressBarClassName, value, ...props }, ref) => (\r\n  <ProgressPrimitive.Root\r\n    ref={ref}\r\n    className={cn(\r\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\r\n      className\r\n    )}\r\n    {...props}\r\n  >\r\n    <ProgressPrimitive.Indicator\r\n      className={cn(\r\n        \"h-full w-full flex-1 bg-purple-400 transition-all \",\r\n        progressBarClassName\r\n      )}\r\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\r\n    />\r\n  </ProgressPrimitive.Root>\r\n));\r\n\r\nProgress.displayName = \"Progress\";\r\n\r\nexport default Progress;\r\n\r\n/**\r\n *\r\n * @description Clean skeleton component for discordPresence\r\n */\r\nconst DiscordSkeleton: React.FC = () => {\r\n  return (\r\n    <div className=\"flex justify-start items-center gap-4\">\r\n      <div className=\"w-24  h-24 bg-gray-700 animate-pulse rounded-2xl\"></div>\r\n      <div className=\"flex flex-col  gap-3 items-start\">\r\n        <div className=\"w-32  h-5 bg-gray-700 animate-pulse rounded-2xl\"></div>\r\n        <div className=\"w-36  h-5 bg-gray-700 animate-pulse rounded-2xl\"></div>\r\n        <div className=\"flex justify-start items-center gap-3\">\r\n          <div className=\"w-16  h-5 bg-gray-700 animate-pulse rounded-2xl\"></div>\r\n          <div className=\"w-16  h-5 bg-gray-700 animate-pulse rounded-2xl\"></div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n",
      "type": "registry:component",
      "target": "components/discord.tsx"
    }
  ]
}